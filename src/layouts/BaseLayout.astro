---
import "@styles/index.css";
import "tippy.js/dist/tippy.css";
import "tippy.js/animations/scale.css";
import { ENVIRONMENT } from "astro:env/client";
import { ClientRouter } from "astro:transitions";
import Header from "@components/header/Header.astro";
import { cn } from "@lib/utils";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
const { locale } = Astro.locals;
---

<!doctype html>
<html lang={locale} class="overflow-x-hidden font-geist">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <ClientRouter />

    <script>
      import tippy, { type Placement } from "tippy.js";

      document.addEventListener("astro:page-load", () => {
        const tips = document.querySelectorAll("[data-tip]");
        tips.forEach((t) => {
          if (t.tagName == "SPAN" || t.tagName == "DIV") {
            t.setAttribute("tabindex", "0");
          }
          tippy(t, {
            content: t.getAttribute("data-tip") || "",
            placement:
              (t.getAttribute("data-tip-placement") as Placement) || "top",
            arrow: false,
            animation: "scale",
            duration: [250, null],
          });
        });
      });
    </script>
  </head>
  <body
    class={cn("overflow-x-hidden antialiased", {
      "debug-screens": ENVIRONMENT === "dev",
    })}
  >
    <Header class="fixed inset-0 top-0 z-20" />
    <main class="min-h-main mt-header mx-auto max-w-screen-lg px-8 py-16">
      <slot />
    </main>
  </body>
</html>
<script>
  function updatePageLinks(entry: IntersectionObserverEntry | undefined) {
    const documentLinks = document.querySelectorAll(
      "a[href^='#']"
    ) satisfies NodeListOf<HTMLAnchorElement>;
    for (const link of documentLinks) {
      const [, target] = link.href.split("#");
      link.classList.toggle("active", target === entry?.target.id);
    }
  }

  document.addEventListener("astro:page-load", async () => {
    const preline = await import("preline/dist/preline.js");
    preline.HSStaticMethods.autoInit();
    const sections = document.querySelectorAll("section[id]");
    let lastVisibleSection: IntersectionObserverEntry | undefined;
    const observer = new IntersectionObserver(
      (entries) => {
        const newLast = entries.findLast((entry) => entry.isIntersecting);
        // If there's a new section in view, update the corresponding links.
        if (newLast !== undefined && lastVisibleSection !== newLast) {
          lastVisibleSection = newLast;
          updatePageLinks(lastVisibleSection);
        }
      },
      {
        threshold: 0.3,
      }
    );

    for (const section of sections) {
      observer.observe(section);
    }
  });
</script>
<style is:global>
  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Bold.woff2") format("woff2");
    font-weight: 700;
    font-style: normal;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-Regular.woff2") format("woff2");
    font-weight: 400;
    font-style: normal;
  }

  @font-face {
    font-family: "Geist";
    src: url("/fonts/Geist-SemiBold.woff2") format("woff2");
    font-weight: 600;
    font-style: normal;
  }

  @font-face {
    font-family: "NeutralFace";
    src: url("/fonts/NeutralFace-Bold.otf") format("opentype");
    font-weight: 700;
    font-style: normal;
  }
</style>
